{"version":3,"sources":["Components/Navbar.js","Components/TextForm.js","Components/Alert.js","App.js","reportWebVitals.js","index.js"],"names":["Navbar","props","className","mode","href","title","type","id","onClick","toggleMode","htmlFor","TextForm","textLength","useState","text","settext","searchStr","setstr","split","filter","element","length","style","color","heading","value","rows","onChange","event","target","backgroundColor","disabled","newText","toUpperCase","toLowerCase","document","getElementById","select","navigator","clipboard","writeText","getSelection","removeAllRanges","showalert","newtext","join","placeholder","console","log","search","Alert","height","alert","Type","role","word","charAt","slice","capitalize","msg","App","Mode","setMode","body","message","setTimeout","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode"],"mappings":"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","file":"static/js/main.7af003d6.chunk.js","sourcesContent":["import React from \"react\";\r\n\r\nconst Navbar = (props) => {\r\n  return (\r\n\r\n      <nav className={`navbar navbar-expand-lg navbar-${props.mode} bg-${props.mode}`}>\r\n        <div className=\"container-fluid\">\r\n          <a className=\"navbar-brand\" href=\"#\">{props.title}</a>\r\n          <button className=\"navbar-toggler\" type=\"button\" data-bs-toggle=\"collapse\" data-bs-target=\"#navbarSupportedContent\" aria-controls=\"navbarSupportedContent\" aria-expanded=\"false\" aria-label=\"Toggle navigation\">\r\n          <span className=\"navbar-toggler-icon\"></span>\r\n          </button>\r\n          <div className=\"collapse navbar-collapse\" id=\"navbarSupportedContent\">\r\n              <ul className=\"navbar-nav me-auto mb-2 mb-lg-0\">\r\n                <li className=\"nav-item\">\r\n                  {/* <a className=\"nav-link active\" aria-current=\"page\" href=\"#\">Home</a> */}\r\n                  <a className=\"nav-link active\" aria-current=\"page\" href=\"#\">Home</a>\r\n                  </li>\r\n              </ul>\r\n              <div className={`form-check form-switch text-${props.mode==='light'?'dark':'light'}`}>\r\n                <input className=\"form-check-input\" onClick={props.toggleMode} type=\"checkbox\" id=\"flexSwitchCheckDefault\"/>\r\n                <label className=\"form-check-label\" htmlFor=\"flexSwitchCheckDefault\">Enable {props.mode} Mode</label>\r\n              </div>\r\n          </div>\r\n        </div>\r\n      </nav>\r\n\r\n  );\r\n};\r\n\r\nexport default Navbar;\r\n","import React from 'react';\r\nimport { useState } from 'react';\r\n\r\nconst TextForm = (props) => {\r\n    let textLength=0\r\n    const [text,settext]=useState(\"\")\r\n    const [searchStr,setstr]=useState(\"\")\r\n     function ConverttoUpper() {\r\n         let newText=text.toUpperCase();\r\n       settext(newText);\r\n     }\r\n     function ConverttoLower() {\r\n         let newText=text.toLowerCase();\r\n       settext(newText);\r\n     }\r\n\r\n     function searchString() {\r\n        console.log(searchStr.length)\r\n        if (searchStr!==\"\")\r\n        {let foundText=text.search(searchStr);\r\n        if (foundText===-1)\r\n        props.showalert(\" String Not Found\",'warning')\r\n        else\r\n        props.showalert(\" String Found\",'success') }     \r\n        else\r\n        props.showalert(\" Invalid Word to Search\",'warning')\r\n     }\r\n\r\n     function handleCopy() {\r\n         let text=document.getElementById(\"myText\")\r\n         text.select()\r\n         navigator.clipboard.writeText(text.value)\r\n         document.getSelection().removeAllRanges();\r\n         props.showalert(\" Copied to Clipboard :)\",'success')\r\n     }\r\n\r\n     function handleExtraSpaces() {\r\n         let newtext=text.split(/[ ]+/)\r\n         settext(newtext.join(\" \"))\r\n         props.showalert(\" Extra Spaces are Removed :)\",'success')\r\n     }\r\n\r\n     textLength=text.split(' ').filter(element => {return element.length!==0}).length\r\n    return (\r\n        <div className=\"container\" style={{color:props.mode==='dark'?'white':'black'}}>\r\n            <h1 className=\"mb-3\">{props.heading}ðŸ‘‡ðŸ‘‡</h1>\r\n            <div className=\"mb-3\">\r\n            <textarea className=\"form-control\" value={text} id=\"myText\" rows=\"8\" onChange={event => settext(event.target.value)} style={{backgroundColor:props.mode==='dark'?'#13466e':'white',\r\n            color:props.mode==='dark'?'white':'black'}}></textarea>\r\n            </div>\r\n            <button disabled={text.length===0} className=\"btn btn-primary mx-1 my-1\" onClick={ConverttoUpper}>Convert to Uppercase</button>\r\n            <button disabled={text.length===0} className=\"btn btn-primary mx-1 my-1\" onClick={ConverttoLower}>Convert to Lowercase</button>\r\n            <button disabled={text.length===0} className=\"btn btn-primary mx-1 my-1\" onClick={handleCopy}>Copy Text</button>\r\n            <button disabled={text.length===0} className=\"btn btn-primary mx-1 my-1\" onClick={handleExtraSpaces}>Remove Extra Spaces</button>\r\n            <button disabled={text.length===0} className=\"btn btn-primary mx-1\" onClick={()=> settext(\"\")}>Clear Text</button>\r\n            <input type=\"text\" className=\"form-control-sm mx-1 my-1\" placeholder=\"Search for a Word\" onChange={(event)=> setstr(event.target.value)}\r\n            style={{backgroundColor:props.mode==='dark'?'rgb(19, 70, 110)':'white',\r\n            color:props.mode==='dark'?'white':'black'}}/>\r\n            <button disabled={searchStr.length===0} className=\"btn btn-primary mx-1\" onClick={searchString}>Search</button>\r\n            <div className=\"container my-3\">\r\n                <h2>Your Text Summary</h2>\r\n                <p> {textLength} Words and {text.length} Characters including space' '</p>\r\n                <p> {textLength<=0?0:.008 * text.split(' ').filter(element => {return element.length!==0}).length} Minutes to read</p>\r\n                <h2>Preview</h2>\r\n                <p>{textLength>0?text:'Nothing to Show! Type Some Text in Textarea'}</p>\r\n            </div>\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default TextForm;\r\n","import React from 'react';\r\n\r\nconst Alert = (props) => {\r\n    const capitalize=word => {\r\n        const text=word.toLowerCase()\r\n        return text.charAt(0).toUpperCase()+text.slice(1)+' ';\r\n    }\r\n    return (\r\n        <div style={{height:'50px'}}>\r\n            {props.alert && <div className={`alert alert-${props.alert.Type} alert-dismissible fade show`} role=\"alert\">                \r\n                <strong>{capitalize(props.alert.Type)}</strong>{props.alert.msg}\r\n                <button type=\"button\" className=\"btn-close\" data-bs-dismiss=\"alert\" aria-label=\"Close\"></button>\r\n            </div>}\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default Alert;\r\n","import './App.css';\r\nimport Navbar from './Components/Navbar';\r\nimport TextForm from './Components/TextForm';\r\nimport React, { useState } from 'react';\r\nimport Alert from './Components/Alert'\r\n\r\nfunction App() {\r\n\r\n  const [alert, showalert] = useState(null);\r\n  function toggleMode() {\r\n    if (Mode === 'light')\r\n    {\r\n      setMode('dark')\r\n      document.body.style.backgroundColor='#2a2f47';\r\n      showalert({msg:\" Dark Mode has been Enabled!\",Type:\"success \"});\r\n      document.title=\"TextUtils - Dark Mode\"\r\n    }\r\n    else\r\n    {\r\n      setMode('light')    \r\n      document.body.style.backgroundColor='white';\r\n      showalert({msg:\" Light Mode has been Enabled!\",Type:\"success \"});\r\n      document.title=\"TextUtils - Light Mode\"\r\n    }\r\n  }\r\n  const [Mode, setMode] = useState('light');\r\n\r\n\r\n  const SetAlert=(message,type)=>{\r\n    showalert({\r\n      msg:message,\r\n      Type:type\r\n    })\r\n    setTimeout(()=> showalert(null),1000)\r\n  }\r\n  return (\r\n    <div >\r\n      <Navbar title=\"TextUtils\" mode={Mode} toggleMode={toggleMode}></Navbar>\r\n      <Alert alert={alert}/>\r\n      <div className=\"container my-3\"> \r\n        <TextForm showalert={SetAlert} heading=\"Enter Text to Analyz\" mode={Mode} toggleMode={toggleMode}/>        \r\n      </div>\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default App;\r\n","const reportWebVitals = onPerfEntry => {\r\n  if (onPerfEntry && onPerfEntry instanceof Function) {\r\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\r\n      getCLS(onPerfEntry);\r\n      getFID(onPerfEntry);\r\n      getFCP(onPerfEntry);\r\n      getLCP(onPerfEntry);\r\n      getTTFB(onPerfEntry);\r\n    });\r\n  }\r\n};\r\n\r\nexport default reportWebVitals;\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport App from './App';\r\nimport reportWebVitals from './reportWebVitals';\r\n\r\nReactDOM.render(\r\n  <React.StrictMode>\r\n    <App />\r\n  </React.StrictMode>,\r\n  document.getElementById('root')\r\n);\r\n\r\n// If you want to start measuring performance in your app, pass a function\r\n// to log results (for example: reportWebVitals(console.log))\r\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\r\nreportWebVitals();\r\n"],"sourceRoot":""}